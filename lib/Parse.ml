(* Generated by ocaml-tree-sitter. *)

(*
   Disable warning 42:
     "this use of Foo relies on type-directed disambiguation,
     it will not compile with OCaml 4.00 or earlier."
*)
[@@@warning "-42"]

(* Disable warnings against unused variables. *)
[@@@warning "-26-27-32"]

open Tree_sitter_bindings
open Tree_sitter_run

type mt = Run.matcher_token

external create_parser :
  unit -> Tree_sitter_API.ts_parser = "octs_create_parser_make"

let parse_source_string ?src_file contents =
  let ts_parser = create_parser () in
  Tree_sitter_parsing.parse_source_string ?src_file ts_parser contents

let parse_source_file src_file =
  let ts_parser = create_parser () in
  Tree_sitter_parsing.parse_source_file ts_parser src_file

let extras = [
  "comment";
]

let children_regexps : (string * Run.exp option) list = [
  "imm_tok_bslash_pat_7b301fa", None;
  "imm_tok_prec_p1_plus", None;
  "imm_tok_f", None;
  "imm_tok_prec_p1_perc", None;
  "imm_tok_prec_p1_slash", None;
  "imm_tok_firs", None;
  "imm_tok_warn", None;
  "tok_rep1_choice_pat_549beab", None;
  "imm_tok_addp", None;
  "imm_tok_adds", None;
  "imm_tok_semi", None;
  "rawline", None;
  "imm_tok_flavor", None;
  "tok_rep1_choice_choice_pat_c610685", None;
  "tok_prec_p1_perc", None;
  "imm_tok_pats", None;
  "imm_tok_real", None;
  "recipeprefix", None;
  "imm_tok_error", None;
  "comment", None;
  "imm_tok_and", None;
  "imm_tok_eval", None;
  "imm_tok_d", None;
  "tok_prec_p1_hat", None;
  "word", None;
  "imm_tok_last", None;
  "imm_tok_sort", None;
  "tok_prec_p1_star", None;
  "imm_tok_file", None;
  "tok_prec_p1_qmark", None;
  "imm_tok_absp", None;
  "imm_tok_wild", None;
  "imm_tok_prec_p1_qmark", None;
  "imm_tok_call", None;
  "imm_tok_fore", None;
  "imm_tok_base", None;
  "tok_prec_n1_pat_d857316", None;
  "imm_tok_or", None;
  "imm_tok_rpar", None;
  "imm_tok_suffix", None;
  "imm_tok_subst", None;
  "imm_tok_filt", None;
  "imm_tok_lpar", None;
  "imm_tok_value", None;
  "imm_tok_strip", None;
  "imm_tok_info", None;
  "imm_tok_prec_p1_lt", None;
  "imm_tok_dir", None;
  "imm_tok_filter", None;
  "imm_tok_prec_p1_star", None;
  "imm_tok_word_", None;
  "imm_tok_prec_p1_hat", None;
  "imm_tok_pat_ba5cc43", None;
  "tok_prec_p1_at", None;
  "tok_prec_p1_plus", None;
  "tok_prec_p1_slash", None;
  "imm_tok_if", None;
  "imm_tok_lcurl", None;
  "imm_tok_word", None;
  "tok_prec_p1_endef", None;
  "imm_tok_origin", None;
  "tok_prec_p1_lt", None;
  "tok_prec_p1_dash", None;
  "imm_tok_pat_5058f1a", None;
  "imm_tok_prec_p1_at", None;
  "imm_tok_notdir", None;
  "imm_tok_words", None;
  "imm_tok_join", None;
  "imm_tok_find", None;
  "imm_tok_pat_9713f58", None;
  "imm_tok_colon", None;
  "undefine_directive",
  Some (
    Seq [
      Token (Literal "undefine");
      Token (Name "word");
      Token (Name "imm_tok_pat_ba5cc43");
    ];
  );
  "automatic_variable",
  Some (
    Seq [
      Alt [|
        Token (Literal "$");
        Token (Literal "$$");
      |];
      Alt [|
        Alt [|
          Token (Name "imm_tok_prec_p1_at");
          Token (Name "imm_tok_prec_p1_perc");
          Token (Name "imm_tok_prec_p1_lt");
          Token (Name "imm_tok_prec_p1_qmark");
          Token (Name "imm_tok_prec_p1_hat");
          Token (Name "imm_tok_prec_p1_plus");
          Token (Name "imm_tok_prec_p1_slash");
          Token (Name "imm_tok_prec_p1_star");
        |];
        Alt [|
          Seq [
            Token (Name "imm_tok_lpar");
            Alt [|
              Token (Name "tok_prec_p1_at");
              Token (Name "tok_prec_p1_perc");
              Token (Name "tok_prec_p1_lt");
              Token (Name "tok_prec_p1_qmark");
              Token (Name "tok_prec_p1_hat");
              Token (Name "tok_prec_p1_plus");
              Token (Name "tok_prec_p1_slash");
              Token (Name "tok_prec_p1_star");
            |];
            Opt (
              Alt [|
                Token (Name "imm_tok_d");
                Token (Name "imm_tok_f");
              |];
            );
            Token (Literal ")");
          ];
          Seq [
            Token (Name "imm_tok_lcurl");
            Alt [|
              Token (Name "tok_prec_p1_at");
              Token (Name "tok_prec_p1_perc");
              Token (Name "tok_prec_p1_lt");
              Token (Name "tok_prec_p1_qmark");
              Token (Name "tok_prec_p1_hat");
              Token (Name "tok_prec_p1_plus");
              Token (Name "tok_prec_p1_slash");
              Token (Name "tok_prec_p1_star");
            |];
            Opt (
              Alt [|
                Token (Name "imm_tok_d");
                Token (Name "imm_tok_f");
              |];
            );
            Token (Literal "}");
          ];
        |];
      |];
    ];
  );
  "define_directive",
  Some (
    Seq [
      Token (Literal "define");
      Token (Name "word");
      Opt (
        Token (Name "imm_tok_pat_9713f58");
      );
      Opt (
        Alt [|
          Token (Literal "=");
          Token (Literal ":=");
          Token (Literal "::=");
          Token (Literal "?=");
          Token (Literal "+=");
        |];
      );
      Opt (
        Token (Name "imm_tok_pat_9713f58");
      );
      Token (Name "imm_tok_pat_ba5cc43");
      Opt (
        Repeat1 (
          Token (Name "rawline");
        );
      );
      Token (Name "tok_prec_p1_endef");
      Token (Name "imm_tok_pat_ba5cc43");
    ];
  );
  "archive",
  Some (
    Seq [
      Token (Name "word");
      Token (Name "imm_tok_lpar");
      Token (Name "list");
      Token (Name "imm_tok_rpar");
    ];
  );
  "arguments",
  Some (
    Seq [
      Token (Name "text");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "text");
        ];
      );
    ];
  );
  "concatenation",
  Some (
    Seq [
      Alt [|
        Token (Name "word");
        Token (Name "archive");
        Token (Name "variable");
        Token (Name "function");
        Token (Name "concatenation");
        Token (Name "string");
      |];
      Repeat1 (
        Alt [|
          Token (Name "word");
          Token (Name "archive");
          Token (Name "variable");
          Token (Name "function");
          Token (Name "concatenation");
          Token (Name "string");
        |];
      );
    ];
  );
  "function",
  Some (
    Alt [|
      Token (Name "function_call");
      Token (Name "shell_function");
    |];
  );
  "function_call",
  Some (
    Seq [
      Alt [|
        Token (Literal "$");
        Token (Literal "$$");
      |];
      Token (Name "imm_tok_lpar");
      Alt [|
        Token (Name "imm_tok_subst");
        Token (Name "imm_tok_pats");
        Token (Name "imm_tok_strip");
        Token (Name "imm_tok_find");
        Token (Name "imm_tok_filter");
        Token (Name "imm_tok_filt");
        Token (Name "imm_tok_sort");
        Token (Name "imm_tok_word");
        Token (Name "imm_tok_words");
        Token (Name "imm_tok_word_");
        Token (Name "imm_tok_firs");
        Token (Name "imm_tok_last");
        Token (Name "imm_tok_dir");
        Token (Name "imm_tok_notdir");
        Token (Name "imm_tok_suffix");
        Token (Name "imm_tok_base");
        Token (Name "imm_tok_adds");
        Token (Name "imm_tok_addp");
        Token (Name "imm_tok_join");
        Token (Name "imm_tok_wild");
        Token (Name "imm_tok_real");
        Token (Name "imm_tok_absp");
        Token (Name "imm_tok_error");
        Token (Name "imm_tok_warn");
        Token (Name "imm_tok_info");
        Token (Name "imm_tok_origin");
        Token (Name "imm_tok_flavor");
        Token (Name "imm_tok_fore");
        Token (Name "imm_tok_if");
        Token (Name "imm_tok_or");
        Token (Name "imm_tok_and");
        Token (Name "imm_tok_call");
        Token (Name "imm_tok_eval");
        Token (Name "imm_tok_file");
        Token (Name "imm_tok_value");
      |];
      Opt (
        Token (Name "imm_tok_pat_9713f58");
      );
      Token (Name "arguments");
      Token (Literal ")");
    ];
  );
  "list",
  Some (
    Seq [
      Alt [|
        Token (Name "word");
        Token (Name "archive");
        Token (Name "variable");
        Token (Name "function");
        Token (Name "concatenation");
        Token (Name "string");
      |];
      Repeat (
        Seq [
          Alt [|
            Token (Name "imm_tok_pat_9713f58");
            Token (Name "imm_tok_bslash_pat_7b301fa");
          |];
          Alt [|
            Token (Name "word");
            Token (Name "archive");
            Token (Name "variable");
            Token (Name "function");
            Token (Name "concatenation");
            Token (Name "string");
          |];
        ];
      );
      Opt (
        Token (Name "imm_tok_pat_9713f58");
      );
    ];
  );
  "shell_command", Some (Token (Name "text"););
  "shell_function",
  Some (
    Seq [
      Alt [|
        Token (Literal "$");
        Token (Literal "$$");
      |];
      Token (Name "imm_tok_lpar");
      Token (Literal "shell");
      Opt (
        Token (Name "imm_tok_pat_9713f58");
      );
      Token (Name "shell_command");
      Token (Literal ")");
    ];
  );
  "string",
  Some (
    Alt [|
      Seq [
        Token (Literal "\"");
        Opt (
          Repeat1 (
            Alt [|
              Token (Name "variable");
              Token (Name "function");
              Token (Name "tok_prec_n1_pat_d857316");
            |];
          );
        );
        Token (Literal "\"");
      ];
      Seq [
        Token (Literal "'");
        Opt (
          Repeat1 (
            Alt [|
              Token (Name "variable");
              Token (Name "function");
              Token (Name "tok_prec_n1_pat_d857316");
            |];
          );
        );
        Token (Literal "'");
      ];
    |];
  );
  "substitution_reference",
  Some (
    Seq [
      Alt [|
        Token (Literal "$");
        Token (Literal "$$");
      |];
      Alt [|
        Seq [
          Token (Name "imm_tok_lpar");
          Alt [|
            Token (Name "word");
            Token (Name "archive");
            Token (Name "variable");
            Token (Name "function");
            Token (Name "concatenation");
            Token (Name "string");
          |];
          Token (Literal ":");
          Alt [|
            Token (Name "word");
            Token (Name "archive");
            Token (Name "variable");
            Token (Name "function");
            Token (Name "concatenation");
            Token (Name "string");
          |];
          Token (Literal "=");
          Alt [|
            Token (Name "word");
            Token (Name "archive");
            Token (Name "variable");
            Token (Name "function");
            Token (Name "concatenation");
            Token (Name "string");
          |];
          Token (Literal ")");
        ];
        Seq [
          Token (Name "imm_tok_lcurl");
          Alt [|
            Token (Name "word");
            Token (Name "archive");
            Token (Name "variable");
            Token (Name "function");
            Token (Name "concatenation");
            Token (Name "string");
          |];
          Token (Literal ":");
          Alt [|
            Token (Name "word");
            Token (Name "archive");
            Token (Name "variable");
            Token (Name "function");
            Token (Name "concatenation");
            Token (Name "string");
          |];
          Token (Literal "=");
          Alt [|
            Token (Name "word");
            Token (Name "archive");
            Token (Name "variable");
            Token (Name "function");
            Token (Name "concatenation");
            Token (Name "string");
          |];
          Token (Literal "}");
        ];
      |];
    ];
  );
  "text",
  Some (
    Alt [|
      Seq [
        Token (Name "tok_rep1_choice_choice_pat_c610685");
        Repeat (
          Seq [
            Alt [|
              Token (Name "variable");
              Token (Name "function");
              Token (Literal "$$");
              Token (Literal "//");
            |];
            Opt (
              Token (Name "tok_rep1_choice_choice_pat_c610685");
            );
          ];
        );
      ];
      Seq [
        Alt [|
          Token (Name "variable");
          Token (Name "function");
          Token (Literal "$$");
          Token (Literal "//");
        |];
        Repeat (
          Seq [
            Opt (
              Token (Name "tok_rep1_choice_choice_pat_c610685");
            );
            Alt [|
              Token (Name "variable");
              Token (Name "function");
              Token (Literal "$$");
              Token (Literal "//");
            |];
          ];
        );
        Opt (
          Token (Name "tok_rep1_choice_choice_pat_c610685");
        );
      ];
    |];
  );
  "variable",
  Some (
    Alt [|
      Token (Name "variable_reference");
      Token (Name "substitution_reference");
      Token (Name "automatic_variable");
    |];
  );
  "variable_reference",
  Some (
    Seq [
      Alt [|
        Token (Literal "$");
        Token (Literal "$$");
      |];
      Alt [|
        Alt [|
          Seq [
            Token (Name "imm_tok_lpar");
            Alt [|
              Token (Name "word");
              Token (Name "archive");
              Token (Name "variable");
              Token (Name "function");
              Token (Name "concatenation");
              Token (Name "string");
            |];
            Token (Literal ")");
          ];
          Seq [
            Token (Name "imm_tok_lcurl");
            Alt [|
              Token (Name "word");
              Token (Name "archive");
              Token (Name "variable");
              Token (Name "function");
              Token (Name "concatenation");
              Token (Name "string");
            |];
            Token (Literal "}");
          ];
        |];
        Token (Name "imm_tok_pat_5058f1a");
      |];
    ];
  );
  "unexport_directive",
  Some (
    Alt [|
      Seq [
        Token (Literal "unexport");
        Token (Name "imm_tok_pat_ba5cc43");
      ];
      Seq [
        Token (Literal "unexport");
        Token (Name "list");
        Token (Name "imm_tok_pat_ba5cc43");
      ];
    |];
  );
  "recipeprefix_assignment",
  Some (
    Seq [
      Token (Literal ".RECIPEPREFIX");
      Opt (
        Token (Name "imm_tok_pat_9713f58");
      );
      Alt [|
        Token (Literal "=");
        Token (Literal ":=");
        Token (Literal "::=");
        Token (Literal "?=");
        Token (Literal "+=");
      |];
      Token (Name "text");
      Token (Name "imm_tok_pat_ba5cc43");
    ];
  );
  "normal_prerequisites", Some (Token (Name "list"););
  "shell_text_without_split",
  Some (
    Alt [|
      Seq [
        Token (Name "tok_rep1_choice_pat_549beab");
        Repeat (
          Seq [
            Alt [|
              Token (Name "variable");
              Token (Name "function");
              Token (Literal "$$");
              Token (Literal "//");
            |];
            Opt (
              Token (Name "tok_rep1_choice_pat_549beab");
            );
          ];
        );
      ];
      Seq [
        Alt [|
          Token (Name "variable");
          Token (Name "function");
          Token (Literal "$$");
          Token (Literal "//");
        |];
        Repeat (
          Seq [
            Opt (
              Token (Name "tok_rep1_choice_pat_549beab");
            );
            Alt [|
              Token (Name "variable");
              Token (Name "function");
              Token (Literal "$$");
              Token (Literal "//");
            |];
          ];
        );
        Opt (
          Token (Name "tok_rep1_choice_pat_549beab");
        );
      ];
    |];
  );
  "variable_assignment",
  Some (
    Seq [
      Opt (
        Seq [
          Token (Name "list");
          Token (Literal ":");
          Opt (
            Token (Name "imm_tok_pat_9713f58");
          );
        ];
      );
      Token (Name "word");
      Opt (
        Token (Name "imm_tok_pat_9713f58");
      );
      Alt [|
        Token (Literal "=");
        Token (Literal ":=");
        Token (Literal "::=");
        Token (Literal "?=");
        Token (Literal "+=");
      |];
      Opt (
        Token (Name "imm_tok_pat_9713f58");
      );
      Opt (
        Token (Name "text");
      );
      Token (Name "imm_tok_pat_ba5cc43");
    ];
  );
  "ifndef_directive",
  Some (
    Seq [
      Token (Literal "ifndef");
      Alt [|
        Token (Name "word");
        Token (Name "archive");
        Token (Name "variable");
        Token (Name "function");
        Token (Name "concatenation");
        Token (Name "string");
      |];
      Token (Name "imm_tok_pat_ba5cc43");
    ];
  );
  "ifdef_directive",
  Some (
    Seq [
      Token (Literal "ifdef");
      Alt [|
        Token (Name "word");
        Token (Name "archive");
        Token (Name "variable");
        Token (Name "function");
        Token (Name "concatenation");
        Token (Name "string");
      |];
      Token (Name "imm_tok_pat_ba5cc43");
    ];
  );
  "include_directive",
  Some (
    Alt [|
      Seq [
        Token (Literal "include");
        Token (Name "list");
        Token (Name "imm_tok_pat_ba5cc43");
      ];
      Seq [
        Token (Literal "sinclude");
        Token (Name "list");
        Token (Name "imm_tok_pat_ba5cc43");
      ];
      Seq [
        Token (Literal "-include");
        Token (Name "list");
        Token (Name "imm_tok_pat_ba5cc43");
      ];
    |];
  );
  "paths",
  Some (
    Seq [
      Alt [|
        Token (Name "word");
        Token (Name "archive");
        Token (Name "variable");
        Token (Name "function");
        Token (Name "concatenation");
        Token (Name "string");
      |];
      Repeat (
        Seq [
          Alt [|
            Token (Name "imm_tok_colon");
            Token (Name "imm_tok_semi");
          |];
          Alt [|
            Token (Name "word");
            Token (Name "archive");
            Token (Name "variable");
            Token (Name "function");
            Token (Name "concatenation");
            Token (Name "string");
          |];
        ];
      );
    ];
  );
  "conditional_args_cmp",
  Some (
    Alt [|
      Seq [
        Token (Literal "(");
        Opt (
          Alt [|
            Token (Name "word");
            Token (Name "archive");
            Token (Name "variable");
            Token (Name "function");
            Token (Name "concatenation");
            Token (Name "string");
          |];
        );
        Token (Literal ",");
        Opt (
          Alt [|
            Token (Name "word");
            Token (Name "archive");
            Token (Name "variable");
            Token (Name "function");
            Token (Name "concatenation");
            Token (Name "string");
          |];
        );
        Token (Literal ")");
      ];
      Seq [
        Alt [|
          Token (Name "word");
          Token (Name "archive");
          Token (Name "variable");
          Token (Name "function");
          Token (Name "concatenation");
          Token (Name "string");
        |];
        Alt [|
          Token (Name "word");
          Token (Name "archive");
          Token (Name "variable");
          Token (Name "function");
          Token (Name "concatenation");
          Token (Name "string");
        |];
      ];
    |];
  );
  "shell_assignment",
  Some (
    Seq [
      Token (Name "word");
      Opt (
        Token (Name "imm_tok_pat_9713f58");
      );
      Token (Literal "!=");
      Opt (
        Token (Name "imm_tok_pat_9713f58");
      );
      Token (Name "shell_command");
      Token (Name "imm_tok_pat_ba5cc43");
    ];
  );
  "shell_text_with_split",
  Some (
    Seq [
      Token (Name "shell_text_without_split");
      Token (Name "imm_tok_bslash_pat_7b301fa");
    ];
  );
  "export_directive",
  Some (
    Alt [|
      Seq [
        Token (Literal "export");
        Token (Name "imm_tok_pat_ba5cc43");
      ];
      Seq [
        Token (Literal "export");
        Token (Name "list");
        Token (Name "imm_tok_pat_ba5cc43");
      ];
      Seq [
        Token (Literal "export");
        Token (Name "variable_assignment");
      ];
    |];
  );
  "private_directive",
  Some (
    Seq [
      Token (Literal "private");
      Token (Name "variable_assignment");
    ];
  );
  "override_directive",
  Some (
    Alt [|
      Seq [
        Token (Literal "override");
        Token (Name "define_directive");
      ];
      Seq [
        Token (Literal "override");
        Token (Name "variable_assignment");
      ];
      Seq [
        Token (Literal "override");
        Token (Name "undefine_directive");
      ];
    |];
  );
  "vpath_directive",
  Some (
    Alt [|
      Seq [
        Token (Literal "vpath");
        Token (Name "imm_tok_pat_ba5cc43");
      ];
      Seq [
        Token (Literal "vpath");
        Token (Name "word");
        Token (Name "imm_tok_pat_ba5cc43");
      ];
      Seq [
        Token (Literal "vpath");
        Token (Name "word");
        Token (Name "paths");
        Token (Name "imm_tok_pat_ba5cc43");
      ];
    |];
  );
  "vpath_assignment",
  Some (
    Seq [
      Token (Literal "VPATH");
      Opt (
        Token (Name "imm_tok_pat_9713f58");
      );
      Alt [|
        Token (Literal "=");
        Token (Literal ":=");
        Token (Literal "::=");
        Token (Literal "?=");
        Token (Literal "+=");
      |];
      Token (Name "paths");
      Token (Name "imm_tok_pat_ba5cc43");
    ];
  );
  "ifneq_directive",
  Some (
    Seq [
      Token (Literal "ifneq");
      Token (Name "conditional_args_cmp");
      Token (Name "imm_tok_pat_ba5cc43");
    ];
  );
  "ifeq_directive",
  Some (
    Seq [
      Token (Literal "ifeq");
      Token (Name "conditional_args_cmp");
      Token (Name "imm_tok_pat_ba5cc43");
    ];
  );
  "recipe_line",
  Some (
    Seq [
      Opt (
        Alt [|
          Token (Name "tok_prec_p1_at");
          Token (Name "tok_prec_p1_dash");
          Token (Name "tok_prec_p1_plus");
        |];
      );
      Opt (
        Seq [
          Token (Name "shell_text_with_split");
          Repeat (
            Seq [
              Opt (
                Token (Name "recipeprefix");
              );
              Token (Name "shell_text_with_split");
            ];
          );
          Opt (
            Token (Name "recipeprefix");
          );
        ];
      );
      Token (Name "shell_text_without_split");
    ];
  );
  "variable_definition",
  Some (
    Alt [|
      Token (Name "vpath_assignment");
      Token (Name "recipeprefix_assignment");
      Token (Name "variable_assignment");
      Token (Name "shell_assignment");
      Token (Name "define_directive");
    |];
  );
  "conditional_directives",
  Some (
    Alt [|
      Token (Name "ifeq_directive");
      Token (Name "ifneq_directive");
      Token (Name "ifdef_directive");
      Token (Name "ifndef_directive");
    |];
  );
  "attached_recipe_line",
  Some (
    Seq [
      Token (Literal ";");
      Opt (
        Token (Name "recipe_line");
      );
    ];
  );
  "prefixed_recipe_line",
  Some (
    Seq [
      Token (Name "recipeprefix");
      Opt (
        Token (Name "recipe_line");
      );
      Token (Name "imm_tok_pat_ba5cc43");
    ];
  );
  "conditional",
  Some (
    Seq [
      Token (Name "conditional_directives");
      Opt (
        Token (Name "conditional_consequence");
      );
      Repeat (
        Token (Name "elsif_directive");
      );
      Opt (
        Token (Name "else_directive");
      );
      Token (Literal "endif");
      Token (Name "imm_tok_pat_ba5cc43");
    ];
  );
  "conditional_consequence",
  Some (
    Repeat1 (
      Alt [|
        Token (Name "thing");
        Token (Name "prefixed_recipe_line");
      |];
    );
  );
  "directive",
  Some (
    Alt [|
      Token (Name "include_directive");
      Token (Name "vpath_directive");
      Token (Name "export_directive");
      Token (Name "unexport_directive");
      Token (Name "override_directive");
      Token (Name "undefine_directive");
      Token (Name "private_directive");
      Token (Name "conditional");
    |];
  );
  "else_directive",
  Some (
    Seq [
      Token (Literal "else");
      Token (Name "imm_tok_pat_ba5cc43");
      Opt (
        Token (Name "conditional_consequence");
      );
    ];
  );
  "elsif_directive",
  Some (
    Seq [
      Token (Literal "else");
      Token (Name "conditional_directives");
      Opt (
        Token (Name "conditional_consequence");
      );
    ];
  );
  "ordinary_rule",
  Some (
    Seq [
      Token (Name "list");
      Alt [|
        Token (Literal ":");
        Token (Literal "&:");
        Token (Literal "::");
      |];
      Opt (
        Token (Name "imm_tok_pat_9713f58");
      );
      Opt (
        Alt [|
          Token (Name "normal_prerequisites");
          Seq [
            Opt (
              Token (Name "normal_prerequisites");
            );
            Token (Literal "|");
            Token (Name "list");
          ];
        |];
      );
      Alt [|
        Token (Name "recipe");
        Token (Name "imm_tok_pat_ba5cc43");
      |];
    ];
  );
  "recipe",
  Some (
    Alt [|
      Seq [
        Token (Name "attached_recipe_line");
        Token (Name "imm_tok_pat_ba5cc43");
        Repeat (
          Alt [|
            Token (Name "conditional");
            Token (Name "prefixed_recipe_line");
          |];
        );
      ];
      Seq [
        Token (Name "imm_tok_pat_ba5cc43");
        Repeat1 (
          Alt [|
            Token (Name "conditional");
            Token (Name "prefixed_recipe_line");
          |];
        );
      ];
    |];
  );
  "rule",
  Some (
    Alt [|
      Token (Name "ordinary_rule");
      Token (Name "static_pattern_rule");
    |];
  );
  "static_pattern_rule",
  Some (
    Seq [
      Token (Name "list");
      Token (Literal ":");
      Opt (
        Token (Name "imm_tok_pat_9713f58");
      );
      Token (Name "list");
      Token (Literal ":");
      Opt (
        Token (Name "imm_tok_pat_9713f58");
      );
      Opt (
        Token (Name "list");
      );
      Alt [|
        Token (Name "recipe");
        Token (Name "imm_tok_pat_ba5cc43");
      |];
    ];
  );
  "thing",
  Some (
    Alt [|
      Token (Name "rule");
      Token (Name "variable_definition");
      Token (Name "directive");
      Seq [
        Token (Name "function");
        Token (Name "imm_tok_pat_ba5cc43");
      ];
    |];
  );
  "makefile",
  Some (
    Repeat (
      Token (Name "thing");
    );
  );
]

let trans_imm_tok_bslash_pat_7b301fa ((kind, body) : mt) : CST.imm_tok_bslash_pat_7b301fa =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_prec_p1_plus ((kind, body) : mt) : CST.imm_tok_prec_p1_plus =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_f ((kind, body) : mt) : CST.imm_tok_f =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_prec_p1_perc ((kind, body) : mt) : CST.imm_tok_prec_p1_perc =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_prec_p1_slash ((kind, body) : mt) : CST.imm_tok_prec_p1_slash =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_firs ((kind, body) : mt) : CST.imm_tok_firs =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_warn ((kind, body) : mt) : CST.imm_tok_warn =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_tok_rep1_choice_pat_549beab ((kind, body) : mt) : CST.tok_rep1_choice_pat_549beab =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_addp ((kind, body) : mt) : CST.imm_tok_addp =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_adds ((kind, body) : mt) : CST.imm_tok_adds =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_semi ((kind, body) : mt) : CST.imm_tok_semi =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_rawline ((kind, body) : mt) : CST.rawline =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_flavor ((kind, body) : mt) : CST.imm_tok_flavor =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_tok_rep1_choice_choice_pat_c610685 ((kind, body) : mt) : CST.tok_rep1_choice_choice_pat_c610685 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_tok_prec_p1_perc ((kind, body) : mt) : CST.tok_prec_p1_perc =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_pats ((kind, body) : mt) : CST.imm_tok_pats =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_real ((kind, body) : mt) : CST.imm_tok_real =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_recipeprefix ((kind, body) : mt) : CST.recipeprefix =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_error ((kind, body) : mt) : CST.imm_tok_error =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_comment ((kind, body) : mt) : CST.comment =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_and ((kind, body) : mt) : CST.imm_tok_and =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_eval ((kind, body) : mt) : CST.imm_tok_eval =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_d ((kind, body) : mt) : CST.imm_tok_d =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_tok_prec_p1_hat ((kind, body) : mt) : CST.tok_prec_p1_hat =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_word ((kind, body) : mt) : CST.word =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_last ((kind, body) : mt) : CST.imm_tok_last =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_sort ((kind, body) : mt) : CST.imm_tok_sort =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_tok_prec_p1_star ((kind, body) : mt) : CST.tok_prec_p1_star =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_file ((kind, body) : mt) : CST.imm_tok_file =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_tok_prec_p1_qmark ((kind, body) : mt) : CST.tok_prec_p1_qmark =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_absp ((kind, body) : mt) : CST.imm_tok_absp =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_wild ((kind, body) : mt) : CST.imm_tok_wild =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_prec_p1_qmark ((kind, body) : mt) : CST.imm_tok_prec_p1_qmark =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_call ((kind, body) : mt) : CST.imm_tok_call =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_fore ((kind, body) : mt) : CST.imm_tok_fore =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_base ((kind, body) : mt) : CST.imm_tok_base =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_tok_prec_n1_pat_d857316 ((kind, body) : mt) : CST.tok_prec_n1_pat_d857316 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_or ((kind, body) : mt) : CST.imm_tok_or =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_rpar ((kind, body) : mt) : CST.imm_tok_rpar =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_suffix ((kind, body) : mt) : CST.imm_tok_suffix =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_subst ((kind, body) : mt) : CST.imm_tok_subst =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_filt ((kind, body) : mt) : CST.imm_tok_filt =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_lpar ((kind, body) : mt) : CST.imm_tok_lpar =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_value ((kind, body) : mt) : CST.imm_tok_value =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_strip ((kind, body) : mt) : CST.imm_tok_strip =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_info ((kind, body) : mt) : CST.imm_tok_info =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_prec_p1_lt ((kind, body) : mt) : CST.imm_tok_prec_p1_lt =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_dir ((kind, body) : mt) : CST.imm_tok_dir =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_filter ((kind, body) : mt) : CST.imm_tok_filter =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_prec_p1_star ((kind, body) : mt) : CST.imm_tok_prec_p1_star =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_word_ ((kind, body) : mt) : CST.imm_tok_word_ =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_prec_p1_hat ((kind, body) : mt) : CST.imm_tok_prec_p1_hat =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_pat_ba5cc43 ((kind, body) : mt) : CST.imm_tok_pat_ba5cc43 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_tok_prec_p1_at ((kind, body) : mt) : CST.tok_prec_p1_at =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_tok_prec_p1_plus ((kind, body) : mt) : CST.tok_prec_p1_plus =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_tok_prec_p1_slash ((kind, body) : mt) : CST.tok_prec_p1_slash =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_if ((kind, body) : mt) : CST.imm_tok_if =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_lcurl ((kind, body) : mt) : CST.imm_tok_lcurl =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_word ((kind, body) : mt) : CST.imm_tok_word =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_tok_prec_p1_endef ((kind, body) : mt) : CST.tok_prec_p1_endef =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_origin ((kind, body) : mt) : CST.imm_tok_origin =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_tok_prec_p1_lt ((kind, body) : mt) : CST.tok_prec_p1_lt =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_tok_prec_p1_dash ((kind, body) : mt) : CST.tok_prec_p1_dash =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_pat_5058f1a ((kind, body) : mt) : CST.imm_tok_pat_5058f1a =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_prec_p1_at ((kind, body) : mt) : CST.imm_tok_prec_p1_at =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_notdir ((kind, body) : mt) : CST.imm_tok_notdir =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_words ((kind, body) : mt) : CST.imm_tok_words =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_join ((kind, body) : mt) : CST.imm_tok_join =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_find ((kind, body) : mt) : CST.imm_tok_find =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_pat_9713f58 ((kind, body) : mt) : CST.imm_tok_pat_9713f58 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_colon ((kind, body) : mt) : CST.imm_tok_colon =
  match body with
  | Leaf v -> v
  | Children _ -> assert false


let trans_undefine_directive ((kind, body) : mt) : CST.undefine_directive =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_word (Run.matcher_token v1),
            trans_imm_tok_pat_ba5cc43 (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_automatic_variable ((kind, body) : mt) : CST.automatic_variable =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `DOLLAR (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `DOLLARDOLLAR (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v1 with
            | Alt (0, v) ->
                `Choice_imm_tok_prec_p1_at (
                  (match v with
                  | Alt (0, v) ->
                      `Imm_tok_prec_p1_at (
                        trans_imm_tok_prec_p1_at (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Imm_tok_prec_p1_perc (
                        trans_imm_tok_prec_p1_perc (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Imm_tok_prec_p1_lt (
                        trans_imm_tok_prec_p1_lt (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Imm_tok_prec_p1_qmark (
                        trans_imm_tok_prec_p1_qmark (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Imm_tok_prec_p1_hat (
                        trans_imm_tok_prec_p1_hat (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Imm_tok_prec_p1_plus (
                        trans_imm_tok_prec_p1_plus (Run.matcher_token v)
                      )
                  | Alt (6, v) ->
                      `Imm_tok_prec_p1_slash (
                        trans_imm_tok_prec_p1_slash (Run.matcher_token v)
                      )
                  | Alt (7, v) ->
                      `Imm_tok_prec_p1_star (
                        trans_imm_tok_prec_p1_star (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Choice_imm_tok_lpar_choice_tok_prec_p1_at_opt_choice_imm_tok_d_RPAR (
                  (match v with
                  | Alt (0, v) ->
                      `Imm_tok_lpar_choice_tok_prec_p1_at_opt_choice_imm_tok_d_RPAR (
                        (match v with
                        | Seq [v0; v1; v2; v3] ->
                            (
                              trans_imm_tok_lpar (Run.matcher_token v0),
                              (match v1 with
                              | Alt (0, v) ->
                                  `Tok_prec_p1_at (
                                    trans_tok_prec_p1_at (Run.matcher_token v)
                                  )
                              | Alt (1, v) ->
                                  `Tok_prec_p1_perc (
                                    trans_tok_prec_p1_perc (Run.matcher_token v)
                                  )
                              | Alt (2, v) ->
                                  `Tok_prec_p1_lt (
                                    trans_tok_prec_p1_lt (Run.matcher_token v)
                                  )
                              | Alt (3, v) ->
                                  `Tok_prec_p1_qmark (
                                    trans_tok_prec_p1_qmark (Run.matcher_token v)
                                  )
                              | Alt (4, v) ->
                                  `Tok_prec_p1_hat (
                                    trans_tok_prec_p1_hat (Run.matcher_token v)
                                  )
                              | Alt (5, v) ->
                                  `Tok_prec_p1_plus (
                                    trans_tok_prec_p1_plus (Run.matcher_token v)
                                  )
                              | Alt (6, v) ->
                                  `Tok_prec_p1_slash (
                                    trans_tok_prec_p1_slash (Run.matcher_token v)
                                  )
                              | Alt (7, v) ->
                                  `Tok_prec_p1_star (
                                    trans_tok_prec_p1_star (Run.matcher_token v)
                                  )
                              | _ -> assert false
                              )
                              ,
                              Run.opt
                                (fun v ->
                                  (match v with
                                  | Alt (0, v) ->
                                      `Imm_tok_d (
                                        trans_imm_tok_d (Run.matcher_token v)
                                      )
                                  | Alt (1, v) ->
                                      `Imm_tok_f (
                                        trans_imm_tok_f (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                )
                                v2
                              ,
                              Run.trans_token (Run.matcher_token v3)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (1, v) ->
                      `Imm_tok_lcurl_choice_tok_prec_p1_at_opt_choice_imm_tok_d_RCURL (
                        (match v with
                        | Seq [v0; v1; v2; v3] ->
                            (
                              trans_imm_tok_lcurl (Run.matcher_token v0),
                              (match v1 with
                              | Alt (0, v) ->
                                  `Tok_prec_p1_at (
                                    trans_tok_prec_p1_at (Run.matcher_token v)
                                  )
                              | Alt (1, v) ->
                                  `Tok_prec_p1_perc (
                                    trans_tok_prec_p1_perc (Run.matcher_token v)
                                  )
                              | Alt (2, v) ->
                                  `Tok_prec_p1_lt (
                                    trans_tok_prec_p1_lt (Run.matcher_token v)
                                  )
                              | Alt (3, v) ->
                                  `Tok_prec_p1_qmark (
                                    trans_tok_prec_p1_qmark (Run.matcher_token v)
                                  )
                              | Alt (4, v) ->
                                  `Tok_prec_p1_hat (
                                    trans_tok_prec_p1_hat (Run.matcher_token v)
                                  )
                              | Alt (5, v) ->
                                  `Tok_prec_p1_plus (
                                    trans_tok_prec_p1_plus (Run.matcher_token v)
                                  )
                              | Alt (6, v) ->
                                  `Tok_prec_p1_slash (
                                    trans_tok_prec_p1_slash (Run.matcher_token v)
                                  )
                              | Alt (7, v) ->
                                  `Tok_prec_p1_star (
                                    trans_tok_prec_p1_star (Run.matcher_token v)
                                  )
                              | _ -> assert false
                              )
                              ,
                              Run.opt
                                (fun v ->
                                  (match v with
                                  | Alt (0, v) ->
                                      `Imm_tok_d (
                                        trans_imm_tok_d (Run.matcher_token v)
                                      )
                                  | Alt (1, v) ->
                                      `Imm_tok_f (
                                        trans_imm_tok_f (Run.matcher_token v)
                                      )
                                  | _ -> assert false
                                  )
                                )
                                v2
                              ,
                              Run.trans_token (Run.matcher_token v3)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_define_directive ((kind, body) : mt) : CST.define_directive =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6; v7; v8] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_word (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_imm_tok_pat_9713f58 (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `EQ (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `COLONEQ (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `COLONCOLONEQ (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `QMARKEQ (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (4, v) ->
                    `PLUSEQ (
                      Run.trans_token (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.opt
              (fun v -> trans_imm_tok_pat_9713f58 (Run.matcher_token v))
              v4
            ,
            trans_imm_tok_pat_ba5cc43 (Run.matcher_token v5),
            Run.opt
              (fun v ->
                Run.repeat1
                  (fun v -> trans_rawline (Run.matcher_token v))
                  v
              )
              v6
            ,
            trans_tok_prec_p1_endef (Run.matcher_token v7),
            trans_imm_tok_pat_ba5cc43 (Run.matcher_token v8)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_archive ((kind, body) : mt) : CST.archive =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_word (Run.matcher_token v0),
            trans_imm_tok_lpar (Run.matcher_token v1),
            trans_list_ (Run.matcher_token v2),
            trans_imm_tok_rpar (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_arguments ((kind, body) : mt) : CST.arguments =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_text (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_text (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_concatenation ((kind, body) : mt) : CST.concatenation =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Word (
                  trans_word (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Arch (
                  trans_archive (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Var (
                  trans_variable (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Func (
                  trans_function_ (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Conc (
                  trans_concatenation (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Str (
                  trans_string_ (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat1
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Word (
                      trans_word (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Arch (
                      trans_archive (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Var (
                      trans_variable (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Func (
                      trans_function_ (Run.matcher_token v)
                    )
                | Alt (4, v) ->
                    `Conc (
                      trans_concatenation (Run.matcher_token v)
                    )
                | Alt (5, v) ->
                    `Str (
                      trans_string_ (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_ ((kind, body) : mt) : CST.function_ =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Func_call (
            trans_function_call (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Shell_func (
            trans_shell_function (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_call ((kind, body) : mt) : CST.function_call =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `DOLLAR (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `DOLLARDOLLAR (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_imm_tok_lpar (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Imm_tok_subst (
                  trans_imm_tok_subst (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Imm_tok_pats (
                  trans_imm_tok_pats (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Imm_tok_strip (
                  trans_imm_tok_strip (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Imm_tok_find (
                  trans_imm_tok_find (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Imm_tok_filter (
                  trans_imm_tok_filter (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Imm_tok_filt (
                  trans_imm_tok_filt (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Imm_tok_sort (
                  trans_imm_tok_sort (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Imm_tok_word (
                  trans_imm_tok_word (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `Imm_tok_words (
                  trans_imm_tok_words (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `Imm_tok_word_ (
                  trans_imm_tok_word_ (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `Imm_tok_firs (
                  trans_imm_tok_firs (Run.matcher_token v)
                )
            | Alt (11, v) ->
                `Imm_tok_last (
                  trans_imm_tok_last (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `Imm_tok_dir (
                  trans_imm_tok_dir (Run.matcher_token v)
                )
            | Alt (13, v) ->
                `Imm_tok_notdir (
                  trans_imm_tok_notdir (Run.matcher_token v)
                )
            | Alt (14, v) ->
                `Imm_tok_suffix (
                  trans_imm_tok_suffix (Run.matcher_token v)
                )
            | Alt (15, v) ->
                `Imm_tok_base (
                  trans_imm_tok_base (Run.matcher_token v)
                )
            | Alt (16, v) ->
                `Imm_tok_adds (
                  trans_imm_tok_adds (Run.matcher_token v)
                )
            | Alt (17, v) ->
                `Imm_tok_addp (
                  trans_imm_tok_addp (Run.matcher_token v)
                )
            | Alt (18, v) ->
                `Imm_tok_join (
                  trans_imm_tok_join (Run.matcher_token v)
                )
            | Alt (19, v) ->
                `Imm_tok_wild (
                  trans_imm_tok_wild (Run.matcher_token v)
                )
            | Alt (20, v) ->
                `Imm_tok_real (
                  trans_imm_tok_real (Run.matcher_token v)
                )
            | Alt (21, v) ->
                `Imm_tok_absp (
                  trans_imm_tok_absp (Run.matcher_token v)
                )
            | Alt (22, v) ->
                `Imm_tok_error (
                  trans_imm_tok_error (Run.matcher_token v)
                )
            | Alt (23, v) ->
                `Imm_tok_warn (
                  trans_imm_tok_warn (Run.matcher_token v)
                )
            | Alt (24, v) ->
                `Imm_tok_info (
                  trans_imm_tok_info (Run.matcher_token v)
                )
            | Alt (25, v) ->
                `Imm_tok_origin (
                  trans_imm_tok_origin (Run.matcher_token v)
                )
            | Alt (26, v) ->
                `Imm_tok_flavor (
                  trans_imm_tok_flavor (Run.matcher_token v)
                )
            | Alt (27, v) ->
                `Imm_tok_fore (
                  trans_imm_tok_fore (Run.matcher_token v)
                )
            | Alt (28, v) ->
                `Imm_tok_if (
                  trans_imm_tok_if (Run.matcher_token v)
                )
            | Alt (29, v) ->
                `Imm_tok_or (
                  trans_imm_tok_or (Run.matcher_token v)
                )
            | Alt (30, v) ->
                `Imm_tok_and (
                  trans_imm_tok_and (Run.matcher_token v)
                )
            | Alt (31, v) ->
                `Imm_tok_call (
                  trans_imm_tok_call (Run.matcher_token v)
                )
            | Alt (32, v) ->
                `Imm_tok_eval (
                  trans_imm_tok_eval (Run.matcher_token v)
                )
            | Alt (33, v) ->
                `Imm_tok_file (
                  trans_imm_tok_file (Run.matcher_token v)
                )
            | Alt (34, v) ->
                `Imm_tok_value (
                  trans_imm_tok_value (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_imm_tok_pat_9713f58 (Run.matcher_token v))
              v3
            ,
            trans_arguments (Run.matcher_token v4),
            Run.trans_token (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_list_ ((kind, body) : mt) : CST.list_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Word (
                  trans_word (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Arch (
                  trans_archive (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Var (
                  trans_variable (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Func (
                  trans_function_ (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Conc (
                  trans_concatenation (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Str (
                  trans_string_ (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Imm_tok_pat_9713f58 (
                            trans_imm_tok_pat_9713f58 (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Imm_tok_bslash_pat_7b301fa (
                            trans_imm_tok_bslash_pat_7b301fa (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      (match v1 with
                      | Alt (0, v) ->
                          `Word (
                            trans_word (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Arch (
                            trans_archive (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Var (
                            trans_variable (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Func (
                            trans_function_ (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Conc (
                            trans_concatenation (Run.matcher_token v)
                          )
                      | Alt (5, v) ->
                          `Str (
                            trans_string_ (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v -> trans_imm_tok_pat_9713f58 (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_shell_command ((kind, body) : mt) : CST.shell_command =
  match body with
  | Children v ->
      trans_text (Run.matcher_token v)
  | Leaf _ -> assert false

and trans_shell_function ((kind, body) : mt) : CST.shell_function =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `DOLLAR (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `DOLLARDOLLAR (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_imm_tok_lpar (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            Run.opt
              (fun v -> trans_imm_tok_pat_9713f58 (Run.matcher_token v))
              v3
            ,
            trans_shell_command (Run.matcher_token v4),
            Run.trans_token (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_string_ ((kind, body) : mt) : CST.string_ =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `DQUOT_opt_rep1_choice_var_DQUOT (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.opt
                    (fun v ->
                      Run.repeat1
                        (fun v ->
                          (match v with
                          | Alt (0, v) ->
                              `Var (
                                trans_variable (Run.matcher_token v)
                              )
                          | Alt (1, v) ->
                              `Func (
                                trans_function_ (Run.matcher_token v)
                              )
                          | Alt (2, v) ->
                              `Tok_prec_n1_pat_d857316 (
                                trans_tok_prec_n1_pat_d857316 (Run.matcher_token v)
                              )
                          | _ -> assert false
                          )
                        )
                        v
                    )
                    v1
                  ,
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `SQUOT_opt_rep1_choice_var_SQUOT (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.opt
                    (fun v ->
                      Run.repeat1
                        (fun v ->
                          (match v with
                          | Alt (0, v) ->
                              `Var (
                                trans_variable (Run.matcher_token v)
                              )
                          | Alt (1, v) ->
                              `Func (
                                trans_function_ (Run.matcher_token v)
                              )
                          | Alt (2, v) ->
                              `Tok_prec_n1_pat_d857316 (
                                trans_tok_prec_n1_pat_d857316 (Run.matcher_token v)
                              )
                          | _ -> assert false
                          )
                        )
                        v
                    )
                    v1
                  ,
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_substitution_reference ((kind, body) : mt) : CST.substitution_reference =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `DOLLAR (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `DOLLARDOLLAR (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v1 with
            | Alt (0, v) ->
                `Imm_tok_lpar_choice_word_COLON_choice_word_EQ_choice_word_RPAR (
                  (match v with
                  | Seq [v0; v1; v2; v3; v4; v5; v6] ->
                      (
                        trans_imm_tok_lpar (Run.matcher_token v0),
                        (match v1 with
                        | Alt (0, v) ->
                            `Word (
                              trans_word (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Arch (
                              trans_archive (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Var (
                              trans_variable (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Func (
                              trans_function_ (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Conc (
                              trans_concatenation (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Str (
                              trans_string_ (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                        ,
                        Run.trans_token (Run.matcher_token v2),
                        (match v3 with
                        | Alt (0, v) ->
                            `Word (
                              trans_word (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Arch (
                              trans_archive (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Var (
                              trans_variable (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Func (
                              trans_function_ (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Conc (
                              trans_concatenation (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Str (
                              trans_string_ (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                        ,
                        Run.trans_token (Run.matcher_token v4),
                        (match v5 with
                        | Alt (0, v) ->
                            `Word (
                              trans_word (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Arch (
                              trans_archive (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Var (
                              trans_variable (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Func (
                              trans_function_ (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Conc (
                              trans_concatenation (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Str (
                              trans_string_ (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                        ,
                        Run.trans_token (Run.matcher_token v6)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Imm_tok_lcurl_choice_word_COLON_choice_word_EQ_choice_word_RCURL (
                  (match v with
                  | Seq [v0; v1; v2; v3; v4; v5; v6] ->
                      (
                        trans_imm_tok_lcurl (Run.matcher_token v0),
                        (match v1 with
                        | Alt (0, v) ->
                            `Word (
                              trans_word (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Arch (
                              trans_archive (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Var (
                              trans_variable (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Func (
                              trans_function_ (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Conc (
                              trans_concatenation (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Str (
                              trans_string_ (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                        ,
                        Run.trans_token (Run.matcher_token v2),
                        (match v3 with
                        | Alt (0, v) ->
                            `Word (
                              trans_word (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Arch (
                              trans_archive (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Var (
                              trans_variable (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Func (
                              trans_function_ (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Conc (
                              trans_concatenation (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Str (
                              trans_string_ (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                        ,
                        Run.trans_token (Run.matcher_token v4),
                        (match v5 with
                        | Alt (0, v) ->
                            `Word (
                              trans_word (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Arch (
                              trans_archive (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Var (
                              trans_variable (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Func (
                              trans_function_ (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Conc (
                              trans_concatenation (Run.matcher_token v)
                            )
                        | Alt (5, v) ->
                            `Str (
                              trans_string_ (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                        ,
                        Run.trans_token (Run.matcher_token v6)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_text ((kind, body) : mt) : CST.text =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Tok_rep1_choice_choice_pat_c610685_rep_choice_var_opt_tok_rep1_choice_choice_pat_c610685 (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_tok_rep1_choice_choice_pat_c610685 (Run.matcher_token v0)
                  ,
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            (match v0 with
                            | Alt (0, v) ->
                                `Var (
                                  trans_variable (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Func (
                                  trans_function_ (Run.matcher_token v)
                                )
                            | Alt (2, v) ->
                                `DOLLARDOLLAR (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (3, v) ->
                                `SLASHSLASH (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                            ,
                            Run.opt
                              (fun v ->
                                trans_tok_rep1_choice_choice_pat_c610685 (Run.matcher_token v)
                              )
                              v1
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Choice_var_rep_opt_tok_rep1_choice_choice_pat_c610685_choice_var_opt_tok_rep1_choice_choice_pat_c610685 (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Var (
                        trans_variable (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Func (
                        trans_function_ (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `DOLLARDOLLAR (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `SLASHSLASH (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            Run.opt
                              (fun v ->
                                trans_tok_rep1_choice_choice_pat_c610685 (Run.matcher_token v)
                              )
                              v0
                            ,
                            (match v1 with
                            | Alt (0, v) ->
                                `Var (
                                  trans_variable (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Func (
                                  trans_function_ (Run.matcher_token v)
                                )
                            | Alt (2, v) ->
                                `DOLLARDOLLAR (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (3, v) ->
                                `SLASHSLASH (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                  ,
                  Run.opt
                    (fun v ->
                      trans_tok_rep1_choice_choice_pat_c610685 (Run.matcher_token v)
                    )
                    v2
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_variable ((kind, body) : mt) : CST.variable =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Var_ref (
            trans_variable_reference (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Subs_ref (
            trans_substitution_reference (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Auto_var (
            trans_automatic_variable (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_variable_reference ((kind, body) : mt) : CST.variable_reference =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `DOLLAR (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `DOLLARDOLLAR (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v1 with
            | Alt (0, v) ->
                `Choice_imm_tok_lpar_choice_word_RPAR (
                  (match v with
                  | Alt (0, v) ->
                      `Imm_tok_lpar_choice_word_RPAR (
                        (match v with
                        | Seq [v0; v1; v2] ->
                            (
                              trans_imm_tok_lpar (Run.matcher_token v0),
                              (match v1 with
                              | Alt (0, v) ->
                                  `Word (
                                    trans_word (Run.matcher_token v)
                                  )
                              | Alt (1, v) ->
                                  `Arch (
                                    trans_archive (Run.matcher_token v)
                                  )
                              | Alt (2, v) ->
                                  `Var (
                                    trans_variable (Run.matcher_token v)
                                  )
                              | Alt (3, v) ->
                                  `Func (
                                    trans_function_ (Run.matcher_token v)
                                  )
                              | Alt (4, v) ->
                                  `Conc (
                                    trans_concatenation (Run.matcher_token v)
                                  )
                              | Alt (5, v) ->
                                  `Str (
                                    trans_string_ (Run.matcher_token v)
                                  )
                              | _ -> assert false
                              )
                              ,
                              Run.trans_token (Run.matcher_token v2)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (1, v) ->
                      `Imm_tok_lcurl_choice_word_RCURL (
                        (match v with
                        | Seq [v0; v1; v2] ->
                            (
                              trans_imm_tok_lcurl (Run.matcher_token v0),
                              (match v1 with
                              | Alt (0, v) ->
                                  `Word (
                                    trans_word (Run.matcher_token v)
                                  )
                              | Alt (1, v) ->
                                  `Arch (
                                    trans_archive (Run.matcher_token v)
                                  )
                              | Alt (2, v) ->
                                  `Var (
                                    trans_variable (Run.matcher_token v)
                                  )
                              | Alt (3, v) ->
                                  `Func (
                                    trans_function_ (Run.matcher_token v)
                                  )
                              | Alt (4, v) ->
                                  `Conc (
                                    trans_concatenation (Run.matcher_token v)
                                  )
                              | Alt (5, v) ->
                                  `Str (
                                    trans_string_ (Run.matcher_token v)
                                  )
                              | _ -> assert false
                              )
                              ,
                              Run.trans_token (Run.matcher_token v2)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Imm_tok_pat_5058f1a (
                  trans_imm_tok_pat_5058f1a (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_unexport_directive ((kind, body) : mt) : CST.unexport_directive =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Unex_imm_tok_pat_ba5cc43 (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_imm_tok_pat_ba5cc43 (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Unex_list_imm_tok_pat_ba5cc43 (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_list_ (Run.matcher_token v1),
                  trans_imm_tok_pat_ba5cc43 (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_recipeprefix_assignment ((kind, body) : mt) : CST.recipeprefix_assignment =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_imm_tok_pat_9713f58 (Run.matcher_token v))
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `EQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `COLONEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `COLONCOLONEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `QMARKEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `PLUSEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_text (Run.matcher_token v3),
            trans_imm_tok_pat_ba5cc43 (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false



let trans_normal_prerequisites ((kind, body) : mt) : CST.normal_prerequisites =
  match body with
  | Children v ->
      trans_list_ (Run.matcher_token v)
  | Leaf _ -> assert false


let trans_shell_text_without_split ((kind, body) : mt) : CST.shell_text_without_split =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Tok_rep1_choice_pat_549beab_rep_choice_var_opt_tok_rep1_choice_pat_549beab (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_tok_rep1_choice_pat_549beab (Run.matcher_token v0),
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            (match v0 with
                            | Alt (0, v) ->
                                `Var (
                                  trans_variable (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Func (
                                  trans_function_ (Run.matcher_token v)
                                )
                            | Alt (2, v) ->
                                `DOLLARDOLLAR (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (3, v) ->
                                `SLASHSLASH (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                            ,
                            Run.opt
                              (fun v ->
                                trans_tok_rep1_choice_pat_549beab (Run.matcher_token v)
                              )
                              v1
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Choice_var_rep_opt_tok_rep1_choice_pat_549beab_choice_var_opt_tok_rep1_choice_pat_549beab (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Var (
                        trans_variable (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Func (
                        trans_function_ (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `DOLLARDOLLAR (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `SLASHSLASH (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            Run.opt
                              (fun v ->
                                trans_tok_rep1_choice_pat_549beab (Run.matcher_token v)
                              )
                              v0
                            ,
                            (match v1 with
                            | Alt (0, v) ->
                                `Var (
                                  trans_variable (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Func (
                                  trans_function_ (Run.matcher_token v)
                                )
                            | Alt (2, v) ->
                                `DOLLARDOLLAR (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | Alt (3, v) ->
                                `SLASHSLASH (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                  ,
                  Run.opt
                    (fun v ->
                      trans_tok_rep1_choice_pat_549beab (Run.matcher_token v)
                    )
                    v2
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_variable_assignment ((kind, body) : mt) : CST.variable_assignment =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      trans_list_ (Run.matcher_token v0),
                      Run.trans_token (Run.matcher_token v1),
                      Run.opt
                        (fun v -> trans_imm_tok_pat_9713f58 (Run.matcher_token v))
                        v2
                    )
                | _ -> assert false
                )
              )
              v0
            ,
            trans_word (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_imm_tok_pat_9713f58 (Run.matcher_token v))
              v2
            ,
            (match v3 with
            | Alt (0, v) ->
                `EQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `COLONEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `COLONCOLONEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `QMARKEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `PLUSEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_imm_tok_pat_9713f58 (Run.matcher_token v))
              v4
            ,
            Run.opt
              (fun v -> trans_text (Run.matcher_token v))
              v5
            ,
            trans_imm_tok_pat_ba5cc43 (Run.matcher_token v6)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_ifndef_directive ((kind, body) : mt) : CST.ifndef_directive =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Word (
                  trans_word (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Arch (
                  trans_archive (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Var (
                  trans_variable (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Func (
                  trans_function_ (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Conc (
                  trans_concatenation (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Str (
                  trans_string_ (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_imm_tok_pat_ba5cc43 (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_ifdef_directive ((kind, body) : mt) : CST.ifdef_directive =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Word (
                  trans_word (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Arch (
                  trans_archive (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Var (
                  trans_variable (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Func (
                  trans_function_ (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Conc (
                  trans_concatenation (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Str (
                  trans_string_ (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_imm_tok_pat_ba5cc43 (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_include_directive ((kind, body) : mt) : CST.include_directive =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Incl_list_imm_tok_pat_ba5cc43 (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_list_ (Run.matcher_token v1),
                  trans_imm_tok_pat_ba5cc43 (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Sinc_list_imm_tok_pat_ba5cc43 (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_list_ (Run.matcher_token v1),
                  trans_imm_tok_pat_ba5cc43 (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `DASH_list_imm_tok_pat_ba5cc43 (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_list_ (Run.matcher_token v1),
                  trans_imm_tok_pat_ba5cc43 (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false



let trans_paths ((kind, body) : mt) : CST.paths =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Word (
                  trans_word (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Arch (
                  trans_archive (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Var (
                  trans_variable (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Func (
                  trans_function_ (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Conc (
                  trans_concatenation (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Str (
                  trans_string_ (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Imm_tok_colon (
                            trans_imm_tok_colon (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Imm_tok_semi (
                            trans_imm_tok_semi (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      (match v1 with
                      | Alt (0, v) ->
                          `Word (
                            trans_word (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Arch (
                            trans_archive (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Var (
                            trans_variable (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Func (
                            trans_function_ (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Conc (
                            trans_concatenation (Run.matcher_token v)
                          )
                      | Alt (5, v) ->
                          `Str (
                            trans_string_ (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_conditional_args_cmp ((kind, body) : mt) : CST.conditional_args_cmp =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `LPAR_opt_choice_word_COMMA_opt_choice_word_RPAR (
            (match v with
            | Seq [v0; v1; v2; v3; v4] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.opt
                    (fun v ->
                      (match v with
                      | Alt (0, v) ->
                          `Word (
                            trans_word (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Arch (
                            trans_archive (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Var (
                            trans_variable (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Func (
                            trans_function_ (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Conc (
                            trans_concatenation (Run.matcher_token v)
                          )
                      | Alt (5, v) ->
                          `Str (
                            trans_string_ (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                  ,
                  Run.trans_token (Run.matcher_token v2),
                  Run.opt
                    (fun v ->
                      (match v with
                      | Alt (0, v) ->
                          `Word (
                            trans_word (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Arch (
                            trans_archive (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Var (
                            trans_variable (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `Func (
                            trans_function_ (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `Conc (
                            trans_concatenation (Run.matcher_token v)
                          )
                      | Alt (5, v) ->
                          `Str (
                            trans_string_ (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                    v3
                  ,
                  Run.trans_token (Run.matcher_token v4)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Choice_word_choice_word (
            (match v with
            | Seq [v0; v1] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Word (
                        trans_word (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Arch (
                        trans_archive (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Var (
                        trans_variable (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Func (
                        trans_function_ (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Conc (
                        trans_concatenation (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Str (
                        trans_string_ (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  (match v1 with
                  | Alt (0, v) ->
                      `Word (
                        trans_word (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Arch (
                        trans_archive (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Var (
                        trans_variable (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Func (
                        trans_function_ (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Conc (
                        trans_concatenation (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `Str (
                        trans_string_ (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_shell_assignment ((kind, body) : mt) : CST.shell_assignment =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            trans_word (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_imm_tok_pat_9713f58 (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2),
            Run.opt
              (fun v -> trans_imm_tok_pat_9713f58 (Run.matcher_token v))
              v3
            ,
            trans_shell_command (Run.matcher_token v4),
            trans_imm_tok_pat_ba5cc43 (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false




let trans_shell_text_with_split ((kind, body) : mt) : CST.shell_text_with_split =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_shell_text_without_split (Run.matcher_token v0),
            trans_imm_tok_bslash_pat_7b301fa (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_export_directive ((kind, body) : mt) : CST.export_directive =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Export_imm_tok_pat_ba5cc43 (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_imm_tok_pat_ba5cc43 (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Export_list_imm_tok_pat_ba5cc43 (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_list_ (Run.matcher_token v1),
                  trans_imm_tok_pat_ba5cc43 (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Export_var_assign (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_variable_assignment (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_private_directive ((kind, body) : mt) : CST.private_directive =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_variable_assignment (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_override_directive ((kind, body) : mt) : CST.override_directive =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Over_define_dire (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_define_directive (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Over_var_assign (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_variable_assignment (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Over_unde_dire (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_undefine_directive (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_vpath_directive ((kind, body) : mt) : CST.vpath_directive =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Vpath_imm_tok_pat_ba5cc43 (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_imm_tok_pat_ba5cc43 (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Vpath_word_imm_tok_pat_ba5cc43 (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_word (Run.matcher_token v1),
                  trans_imm_tok_pat_ba5cc43 (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Vpath_word_paths_imm_tok_pat_ba5cc43 (
            (match v with
            | Seq [v0; v1; v2; v3] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_word (Run.matcher_token v1),
                  trans_paths (Run.matcher_token v2),
                  trans_imm_tok_pat_ba5cc43 (Run.matcher_token v3)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_vpath_assignment ((kind, body) : mt) : CST.vpath_assignment =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_imm_tok_pat_9713f58 (Run.matcher_token v))
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `EQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `COLONEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `COLONCOLONEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `QMARKEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `PLUSEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_paths (Run.matcher_token v3),
            trans_imm_tok_pat_ba5cc43 (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_ifneq_directive ((kind, body) : mt) : CST.ifneq_directive =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_conditional_args_cmp (Run.matcher_token v1),
            trans_imm_tok_pat_ba5cc43 (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_ifeq_directive ((kind, body) : mt) : CST.ifeq_directive =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_conditional_args_cmp (Run.matcher_token v1),
            trans_imm_tok_pat_ba5cc43 (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_recipe_line ((kind, body) : mt) : CST.recipe_line =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Tok_prec_p1_at (
                      trans_tok_prec_p1_at (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Tok_prec_p1_dash (
                      trans_tok_prec_p1_dash (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Tok_prec_p1_plus (
                      trans_tok_prec_p1_plus (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v0
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      trans_shell_text_with_split (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.opt
                                  (fun v -> trans_recipeprefix (Run.matcher_token v))
                                  v0
                                ,
                                trans_shell_text_with_split (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                      ,
                      Run.opt
                        (fun v -> trans_recipeprefix (Run.matcher_token v))
                        v2
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            trans_shell_text_without_split (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_variable_definition ((kind, body) : mt) : CST.variable_definition =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Vpath_assign (
            trans_vpath_assignment (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Reci_assign (
            trans_recipeprefix_assignment (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Var_assign (
            trans_variable_assignment (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Shell_assign (
            trans_shell_assignment (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Define_dire (
            trans_define_directive (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_conditional_directives ((kind, body) : mt) : CST.conditional_directives =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Ifeq_dire (
            trans_ifeq_directive (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Ifneq_dire (
            trans_ifneq_directive (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Ifdef_dire (
            trans_ifdef_directive (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Ifndef_dire (
            trans_ifndef_directive (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_attached_recipe_line ((kind, body) : mt) : CST.attached_recipe_line =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_recipe_line (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_prefixed_recipe_line ((kind, body) : mt) : CST.prefixed_recipe_line =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_recipeprefix (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_recipe_line (Run.matcher_token v))
              v1
            ,
            trans_imm_tok_pat_ba5cc43 (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_conditional ((kind, body) : mt) : CST.conditional =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            trans_conditional_directives (Run.matcher_token v0),
            Run.opt
              (fun v ->
                trans_conditional_consequence (Run.matcher_token v)
              )
              v1
            ,
            Run.repeat
              (fun v -> trans_elsif_directive (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v -> trans_else_directive (Run.matcher_token v))
              v3
            ,
            Run.trans_token (Run.matcher_token v4),
            trans_imm_tok_pat_ba5cc43 (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_conditional_consequence ((kind, body) : mt) : CST.conditional_consequence =
  match body with
  | Children v ->
      Run.repeat1
        (fun v ->
          (match v with
          | Alt (0, v) ->
              `Thing (
                trans_thing (Run.matcher_token v)
              )
          | Alt (1, v) ->
              `Pref_recipe_line (
                trans_prefixed_recipe_line (Run.matcher_token v)
              )
          | _ -> assert false
          )
        )
        v
  | Leaf _ -> assert false

and trans_directive ((kind, body) : mt) : CST.directive =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Incl_dire (
            trans_include_directive (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Vpath_dire (
            trans_vpath_directive (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Export_dire (
            trans_export_directive (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Unex_dire (
            trans_unexport_directive (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Over_dire (
            trans_override_directive (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Unde_dire (
            trans_undefine_directive (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Priv_dire (
            trans_private_directive (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Cond (
            trans_conditional (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_else_directive ((kind, body) : mt) : CST.else_directive =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_imm_tok_pat_ba5cc43 (Run.matcher_token v1),
            Run.opt
              (fun v ->
                trans_conditional_consequence (Run.matcher_token v)
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_elsif_directive ((kind, body) : mt) : CST.elsif_directive =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_conditional_directives (Run.matcher_token v1),
            Run.opt
              (fun v ->
                trans_conditional_consequence (Run.matcher_token v)
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_ordinary_rule ((kind, body) : mt) : CST.ordinary_rule =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_list_ (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `COLON (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `AMPCOLON (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `COLONCOLON (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_imm_tok_pat_9713f58 (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Normal_preres (
                      trans_normal_prerequisites (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Opt_normal_preres_BAR_list (
                      (match v with
                      | Seq [v0; v1; v2] ->
                          (
                            Run.opt
                              (fun v -> trans_normal_prerequisites (Run.matcher_token v))
                              v0
                            ,
                            Run.trans_token (Run.matcher_token v1),
                            trans_list_ (Run.matcher_token v2)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            (match v4 with
            | Alt (0, v) ->
                `Recipe (
                  trans_recipe (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Imm_tok_pat_ba5cc43 (
                  trans_imm_tok_pat_ba5cc43 (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_recipe ((kind, body) : mt) : CST.recipe =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Atta_recipe_line_imm_tok_pat_ba5cc43_rep_choice_cond (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_attached_recipe_line (Run.matcher_token v0),
                  trans_imm_tok_pat_ba5cc43 (Run.matcher_token v1),
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Alt (0, v) ->
                          `Cond (
                            trans_conditional (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Pref_recipe_line (
                            trans_prefixed_recipe_line (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                    v2
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Imm_tok_pat_ba5cc43_rep1_choice_cond (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_imm_tok_pat_ba5cc43 (Run.matcher_token v0),
                  Run.repeat1
                    (fun v ->
                      (match v with
                      | Alt (0, v) ->
                          `Cond (
                            trans_conditional (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Pref_recipe_line (
                            trans_prefixed_recipe_line (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_rule ((kind, body) : mt) : CST.rule =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Ordi_rule (
            trans_ordinary_rule (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Static_pat_rule (
            trans_static_pattern_rule (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_static_pattern_rule ((kind, body) : mt) : CST.static_pattern_rule =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6; v7] ->
          (
            trans_list_ (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_imm_tok_pat_9713f58 (Run.matcher_token v))
              v2
            ,
            trans_list_ (Run.matcher_token v3),
            Run.trans_token (Run.matcher_token v4),
            Run.opt
              (fun v -> trans_imm_tok_pat_9713f58 (Run.matcher_token v))
              v5
            ,
            Run.opt
              (fun v -> trans_list_ (Run.matcher_token v))
              v6
            ,
            (match v7 with
            | Alt (0, v) ->
                `Recipe (
                  trans_recipe (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Imm_tok_pat_ba5cc43 (
                  trans_imm_tok_pat_ba5cc43 (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_thing ((kind, body) : mt) : CST.thing =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Rule (
            trans_rule (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Var_defi (
            trans_variable_definition (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Dire (
            trans_directive (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Func_imm_tok_pat_ba5cc43 (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_function_ (Run.matcher_token v0),
                  trans_imm_tok_pat_ba5cc43 (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_makefile ((kind, body) : mt) : CST.makefile =
  match body with
  | Children v ->
      Run.repeat
        (fun v -> trans_thing (Run.matcher_token v))
        v
  | Leaf _ -> assert false

(*
   Costly operation that translates a whole tree or subtree.

   The first pass translates it into a generic tree structure suitable
   to guess which node corresponds to each grammar rule.
   The second pass is a translation into a typed tree where each grammar
   node has its own type.

   This function is called:
   - once on the root of the program after removing extras
     (comments and other nodes that occur anywhere independently from
     the grammar);
   - once of each extra node, resulting in its own independent tree of type
     'extra'.
*)
let translate_tree src node trans_x =
  let matched_tree = Run.match_tree children_regexps src node in
  Option.map trans_x matched_tree


let translate_extra src (node : Tree_sitter_output_t.node) : CST.extra option =
  match node.type_ with
  | "comment" ->
      (match translate_tree src node trans_comment with
      | None -> None
      | Some x -> Some (`Comment (Run.get_loc node, x)))
  | _ -> None

let translate_root src root_node =
  translate_tree src root_node trans_makefile

let parse_input_tree input_tree =
  let orig_root_node = Tree_sitter_parsing.root input_tree in
  let src = Tree_sitter_parsing.src input_tree in
  let errors = Run.extract_errors src orig_root_node in
  let opt_program, extras =
     Run.translate
       ~extras
       ~translate_root:(translate_root src)
       ~translate_extra:(translate_extra src)
       orig_root_node
  in
  Parsing_result.create src opt_program extras errors

let string ?src_file contents =
  let input_tree = parse_source_string ?src_file contents in
  parse_input_tree input_tree

let file src_file =
  let input_tree = parse_source_file src_file in
  parse_input_tree input_tree

